(*
   A version of tokenringsingleifthen with an auxiliary register marking the next 
   value to be seen by thread 0, and with a nice big value of W to make the point
   about large rings.
   
   Richard Bornat Sept 2016
 *)
given {W=10992}
{ aa:lh=tk=0 }
----------------------

guar [[A].A%W=0/\lh=A/\_B(tk=A) | tk:=A+1;
       [A].A%W=0/\_B(lh=A=tk-1) | lh:=A+1
     ]

macro loopinv = rauxw>=0/\rauxw%W=0/\exists L (rauxw-W<L=lh<=rauxw/\sofar(lh<=rauxw)/\_B(L<=tk<=rauxw))

macro lhseen = r1%W=0/\0<=lh=r1=rauxw/\sofar(lh<=r1)/\_B(tk=r1)

x: rauxw := 0; 

while bb:true do
    do
    {* bo aa: sofar(lh=tk=0); lo x: rauxw=0 *} \->/ 
    ({* lo e: loopinv *} \/ {* lo dd(f): false *})
                                                            b:r1:=lh
    until {* lo b:loopinv/\(r1%W=0=>r1=lh) *}           cc:r1%W=0;
    
    {* lo cc(t): lhseen *}                                  c:r2:=tk;
    
    if {* lo c: lhseen/\r2=tk *} dd: r1=r2 
    then
      {* lo dd(t): lhseen/\r1=r2=tk *} 
                       [* r1%W=0/\lh=r1=r2/\_B(tk=r1) *]    d:tk:=r2+1;
      {* lo d: r1=rauxw *}                                  y:rauxw:=r1+W;
      {* lo y: rauxw=r1+W;
         bo d: _B(r1%W=0/\0<=lh=r1=tk-1)/\sofar(lh<=r1) *}
                         [* _B(r1%W=0/\0<=lh=r1=tk-1) *]    e:lh :=r1+1
    fi
od

rely [[C].C%W!=0/\lh=C/\_B(tk=C) | tk:=C+1;
         [C].C%W!=0/\_B(lh=C<tk) | lh:=C+1
     ]

----------------------
guar [  [D].D%W=1/\lh=D/\_B(tk=D) | tk:=D+1;
      [D].D%W=1/\_B(lh=D=tk-1)    | lh:=D+1
     ]
----------------------
guar [  [E].E%W=2/\lh=E/\_B(tk=E) | tk:=E+1;
      [E].E%W=2/\_B(lh=E=tk-1)    | lh:=E+1
     ]

