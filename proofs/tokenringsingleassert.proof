(*
   A proof of a single-latch single-token token ring. W is chosen to be large enough
   to demonstrate the problems of multi-thread in-flight interference; it can be much
   larger and you still get a proof, but unfortunately Z3 needs an actual number to
   deal with, because it tries all the numbers between A and A+W during the proof of
   thread 0.
   
   (To make a proof with larger W, comment out the guarantees of threads and 2 and 
   edit 'given{W=3}'.)
   
   Only thread 0 is given, plus the guarantees of threads 1 and 2, and their combined
   rely for thread 0.
   
   The proof is based on the following insights:
   
      -- thread 0 only sees the latch and token with values between A (divisible by W)
         and A+W; the interference of threads 1 and 2 can't go beyond A+W and each 
         provides (ISA2 style) an _B-modal assertion about the possible values of tk. 
         At the end of the cycle we know that lh=tk=A+W, and the value of tk was set
         the other side of a barrier in an interfering thread.
         
      -- the _B-modal assertion in the interference of command e (tk:=r2+1), together
         with r1%W=0 and r1=r2, prevents BO inflight interference with the interference of
         command f (lh:=r1+1), because that has _B(r1%W=0/\tk=r1+1).
         
      -- sofar(lh<=r1) in the precondition of f makes it immune to interference from 
         the first line of the guarantee, which could interfere if lh=tk=r1+1. But then 
         the sofar provokes self-UO inflight instability, so we have to have an 
         interference precondition.
         
      -- sofar is passed from the loop invariant down the lo/bo chain to command f, so it
         has to be there in the precondition of command e. That allows local UO inflight
         instability against the interference of command f; once again we need an
         interference precondition.
         
      -- the guarantee, because of the stability of f's precondition, has lh=A=tk-1 in
         the precondition of the second line. The guarantees of threads 1 and 2 are 
         necessarily similar. But when those guarantees are combined to make the rely
         of thread 0, we find that the first line of thread 2's guarantee interferes
         with the second line of thread 1's: i.e. thread 2's token write can legitimately
         overtake thread 1's latch write (and so on, so far as this proof is concerned,
         if there were more than three threads). But there's a limit: the token increases 
         can't go beyond A+W, because that is the step that thread 0 makes, and it doesn't
         interfere with itself. Hence the upper limit on tk in line 2 of the rely.
         
      -- It's all sort-of-kind-of message passing (hence the _B in the second line of 
         the guarantee) and it's a little bit LB as well (hence the use of sofar). It's a
         'nice' proof in the sense that it captures all my programmers' intuitions about
         how the algorithm works. It's an intricate proof at the same time. Hmm.
         
      Richard Bornat Sept 2016
 *)
 
given {W=3}
{ aa:lh=tk=0 }
----------------------

guar [ [A].A%W=0/\lh=A/\_B(tk=A) | tk:=A+1;
        [A].A%W=0/\_B(lh=A=tk-1) | lh:=A+1
     ]

macro loopinv = exists (A,B) (A%W=0/\-W<=A<lh=B<=tk<=A+W/\sofar(lh<=A+W)/\_B(B<=tk<=A+W))

macro lhseen = r1%W=0/\0<=lh=r1/\sofar(lh<=r1)/\_B(tk=r1)

while bb:true do
    {* bo aa: loopinv *} \->/ {* lo f: loopinv *} 
                                                            a:skip; 
    do
        {* lo a: loopinv *}                                 b:r1:=lh
    until {* lo b:loopinv/\(r1%W=0=>r1=lh) *}       cc:r1%W=0;
    
    {* lo cc(t): lhseen *}                                  c:r2:=tk;
    
    {* lo c: lhseen/\r2=tk *}                               d: assert r1=r2;
    
    {* lo d: lhseen/\r1=r2=tk *} 
                       [* r1%W=0/\lh=r1=r2/\_B(tk=r1) *]    e:tk:=r2+1; 
    
    {* bo e: _B(r1%W=0/\0<=lh=r1=tk-1)/\sofar(lh<=r1) *}
                         [* _B(r1%W=0/\0<=lh=r1=tk-1) *]    f:lh:=r1+1
od
rely [          [C].C%W!=0/\lh=C/\_B(tk=C) | tk:=C+1;
      [C].C%W!=0/\_B(lh=C<tk<=(C-(C%3)+W)) | lh:=C+1
     ]
----------------------
guar [[D].D%W=1/\lh=D/\_B(tk=D) | tk:=D+1;
       [D].D%W=1/\_B(lh=D=tk-1) | lh:=D+1
     ]

----------------------
guar [[E].E%W=2/\lh=E/\_B(tk=E) | tk:=E+1;
       [E].E%W=2/\_B(lh=E=tk-1) | lh:=E+1
     ]

